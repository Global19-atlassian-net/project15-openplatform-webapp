type progressChange = (p: number) => void;
declare class ServerClient {
    private apiVersionUrlParam;
    private oldTsmTsqApiVersion;
    private tsmTsqApiVersion;
    private referenceDataAPIVersion;
    maxRetryCount: number;
    sessionId: string;
    retriableStatusCodes: number[];
    onAjaxError: (logObject: any) => void;
    onAjaxRetry: (logObject: any) => void;
    onFallbackToOldApiVersion: (logObject: any) => void;
    Server(): void;
    private retryBasedOnStatus;
    private fallBackToOldApiVersion;
    private setStandardHeaders;
    private createPromiseFromXhr;
    private mergeTsqEventsResults;
    private getQueryApiResult;
    getCancellableTsqResults(token: string, uri: string, tsqArray: Array<any>, onProgressChange?: progressChange, mergeAccumulatedResults?: boolean, storeType?: string): Array<any | Function>;
    getTsqResults(token: string, uri: string, tsqArray: Array<any>, onProgressChange?: progressChange, mergeAccumulatedResults?: boolean, storeType?: string, hasCancelTrigger?: boolean): PromiseLike<any> | Array<any | Function>;
    getAggregates(token: string, uri: string, tsxArray: Array<any>, onProgressChange?: progressChange): Promise<unknown>;
    getTimeseriesInstances(token: string, environmentFqdn: string, limit?: number, timeSeriesIds?: Array<any>): Promise<any>;
    getTimeseriesTypes(token: string, environmentFqdn: string, typeIds?: Array<any>): Promise<any>;
    postTimeSeriesTypes(token: string, environmentFqdn: string, payload: string, useOldApiVersion?: boolean): Promise<any>;
    updateSavedQuery(token: string, timeSeriesQuery: any, endpoint?: string): Promise<any>;
    getTimeseriesHierarchies(token: string, environmentFqdn: string): Promise<any>;
    getTimeseriesModel(token: string, environmentFqdn: string): Promise<any>;
    getTimeseriesInstancesPathSearch(token: string, environmentFqdn: string, payload: any, instancesContinuationToken?: any, hierarchiesContinuationToken?: any): Promise<any>;
    getTimeseriesInstancesSuggestions(token: string, environmentFqdn: string, searchString: string, take?: number): Promise<any>;
    getTimeseriesInstancesSearch(token: string, environmentFqdn: string, searchString: string, continuationToken?: any): Promise<any>;
    getReferenceDatasetRows(token: string, environmentFqdn: string, datasetId: string): Promise<unknown>;
    postReferenceDatasetRows(token: string, environmentFqdn: string, datasetName: string, rows: Array<any>, onProgressChange?: progressChange): any;
    getReferenceDatasets(token: string, resourceId: string, endpoint?: string): Promise<any>;
    deleteReferenceDataSet(token: string, resourceId: string, datasetName: string, endpoint?: string): Promise<any>;
    putReferenceDataSet(token: string, resourceId: string, datasetName: string, dataSet: any, endpoint?: string): Promise<any>;
    getGen1Environment(token: string, resourceId: string, endpoint?: string): Promise<any>;
    getEnvironments(token: string, endpoint?: string): Promise<any>;
    getSampleEnvironments(token: string, endpoint?: string): Promise<any>;
    getMetadata(token: string, environmentFqdn: string, minMillis: number, maxMillis: number): Promise<any>;
    getEventSchema(token: string, environmentFqdn: string, minMillis: number, maxMillis: number): Promise<any>;
    getAvailability(token: string, environmentFqdn: string, apiVersion?: string, hasWarm?: boolean): Promise<unknown>;
    getEvents(token: string, environmentFqdn: string, predicateObject: any, options: any, minMillis: any, maxMillis: any): Promise<any>;
    private getDataWithContinuationBatch;
    private retryWithDelay;
    private sendBatchDataPostRequestPromise;
    private createPostBatchPromise;
    private createPromiseFromXhrForBatchData;
}
export { ServerClient as default };
