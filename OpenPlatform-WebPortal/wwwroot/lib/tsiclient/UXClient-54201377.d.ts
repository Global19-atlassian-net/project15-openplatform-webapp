import LineChart from "./LineChart";
import AvailabilityChart from "./UXClient-f7a68488";
import PieChart from "./PieChart";
import ScatterPlot from "./ScatterPlot";
import GroupedBarChart from "./GroupedBarChart";
import Grid from "./Utils-e5be3308";
import Slider from "./Slider";
import Hierarchy from "./Hierarchy";
import AggregateExpression from "./AggregateExpression";
import Heatmap from "./Heatmap";
import EventsTable from "./EventsTable";
import ModelSearch from "./ModelSearch";
import DateTimePicker from "./DateTimePicker";
import TimezonePicker from "./TimezonePicker";
import EllipsisMenu from "./EllipsisMenu";
import TsqExpression from "./TsqExpression";
import ModelAutocomplete from "./ModelAutocomplete";
import HierarchyNavigation from "./HierarchyNavigation";
import SingleDateTimePicker from "./SingleDateTimePicker";
import DateTimeButtonSingle from "./DateTimeButtonSingle";
import DateTimeButtonRange from "./DateTimeButtonRange";
import ProcessGraphic from "./ProcessGraphic";
import PlaybackControls from "./PlaybackControls";
import ColorPicker from "./ColorPicker";
import GeoProcessGraphic from "./GeoProcessGraphic";
declare class UXClient {
    UXClient(): void;
    DateTimePicker: typeof DateTimePicker;
    PieChart: typeof PieChart;
    ScatterPlot: typeof ScatterPlot;
    BarChart: typeof GroupedBarChart;
    LineChart: typeof LineChart;
    AvailabilityChart: typeof AvailabilityChart;
    Grid: typeof Grid;
    Slider: typeof Slider;
    Hierarchy: typeof Hierarchy;
    AggregateExpression: typeof AggregateExpression;
    TsqExpression: typeof TsqExpression;
    Heatmap: typeof Heatmap;
    EventsTable: typeof EventsTable;
    ModelSearch: typeof ModelSearch;
    ModelAutocomplete: typeof ModelAutocomplete;
    HierarchyNavigation: typeof HierarchyNavigation;
    TimezonePicker: typeof TimezonePicker;
    EllipsisMenu: typeof EllipsisMenu;
    SingleDateTimePicker: typeof SingleDateTimePicker;
    DateTimeButtonSingle: typeof DateTimeButtonSingle;
    DateTimeButtonRange: typeof DateTimeButtonRange;
    ProcessGraphic: typeof ProcessGraphic;
    PlaybackControls: typeof PlaybackControls;
    ColorPicker: typeof ColorPicker;
    GeoProcessGraphic: typeof GeoProcessGraphic;
    transformTsxToEventsArray(events: any, options: any): any[];
    private toISONoMillis;
    //specifiedRange gives the subset of availability buckets to be returned. If not included, will return all buckets
    transformAvailabilityForVisualization(availabilityTsx: any): Array<any>;
    transformTsqResultsForVisualization(tsqResults: Array<any>, options: any): Array<any>;
    transformAggregatesForVisualization(aggregates: Array<any>, options: any): Array<any>;
    // exposed publicly to use for highlighting elements in the well on hover/focus
    createEntityKey(aggName: string, aggIndex?: number): string;
    transformTsqResultsToEventsArray(results: any): any[];
}
export { UXClient as default };
